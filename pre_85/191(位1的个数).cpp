///*
//题目描述:
//编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。
//
// 示例 1：
// 输入：00000000000000000000000000001011
// 输出：3
// 解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
//
// 示例 2：
// 输入：00000000000000000000000010000000
// 输出：1
// 解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
// 示例 3：
//
// 输入：11111111111111111111111111111101
// 输出：31
// 解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
//*/
//
//#include<iostream>
//
//using namespace std;
//
///*解法1：位运算
//思想来自于第190题(颠倒二进制位)
//比如n=0101 count=0
//n>>3->0000&1=0	count=0
//n>>2->0001&1=1	count=1
//n>>1->0010&1=0	count=1
//n>>0->0101&1=1	count=2
//*/
//class Solution1 {
//public:
//	int hammingWeight(uint32_t n) {
//		int count = 0;
//		for (int i = 31; i >= 0; i--) {
//			if (n >> i & 1)
//				count++;
//		}
//		return count;
//	}
//};
//
//int main(int argc, char** argv) {
//	Solution1 s;
//	cout << s.hammingWeight(3) << endl;
//	return 0;
//}